<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">



    <!--1、 扫描web层 -->
    <context:component-scan base-package="com.hskj"/>

    <!--2、 配置静态资源不经过dispatcher处理 -->
    <mvc:default-servlet-handler />

    <!--3、MVC：注解驱动的  -->
    <mvc:annotation-driven/>

    <!--4、 解析的结果: 前缀+ viewName +后缀 -->
    <!-- 定义视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/webpage/"/>
        <property name="suffix" value=".html"/>
        <property name="contentType" value="text/html;charset=utf-8" />
    </bean>


    <!-- —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— -->
    <!-- 我们知道，spring mvc在根据requestmapping找对对应的control方法处理前，会根据请求参数及请求类型做一些数据转换，数据格式化及数据校验等工作，
    因此我们的解决思路就是在数据转换过程中，将前台请求传过来的json字符串转换成对应的对象，然后将此对象绑定到control方法的参数中。 -->
    <!--#############################################################################################################  -->
    <!--  最简单的方式，spring mvc为我们提供了一个MappingJackson2HttpMessageConverter类，用于帮助从json字符串转成java的对象，
    我们只需要在requestmappinghandleradpter中进行配置即可： -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    <!--Java原本默认提交的是字符串（String），将所有的字符串解析为json格式 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=utf-8</value>
            </list>
        </property>
    </bean>
    <!-- 此方式需要依赖以下三个包：jackson-core(2.4.0),jackson-databind(2.4.0),jackson-annotations(2.4.0) -->
    <!-- —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— -->

    <!--<bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">-->
        <!--<property name="features">-->
            <!--<list>-->
                <!--&lt;!&ndash; 输出key时是否使用双引号 &ndash;&gt;-->
                <!--<value>QuoteFieldNames</value>-->
                <!--&lt;!&ndash; 是否输出值为null的字段 &ndash;&gt;-->
                <!--<value>WriteMapNullValue</value>-->
                <!--&lt;!&ndash; List字段如果为null,输出为[],而非null &ndash;&gt;-->
                <!--<value>WriteNullListAsEmpty</value>-->
                <!--&lt;!&ndash; 字符类型字段如果为null,输出为”“,而非null &ndash;&gt;-->
                <!--<value>WriteNullStringAsEmpty</value>-->
                <!--&lt;!&ndash; 字符类型字段如果为null,输出为”“,而非null &ndash;&gt;-->
                <!--<value>WriteNullNumberAsZero</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->




    <!-- 视图拦截器 -->
    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
            <mvc:mapping path="/"/>
            <bean class="com.hskj.unitl.service.Interceptor"/>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>


    <mvc:default-servlet-handler default-servlet-name="default" />

    <!--AOP 注解-->
    <aop:aspectj-autoproxy/>


</beans>